// Mocks generated by Mockito 5.4.4 from annotations
// in assoshare/test/presentation/blocs/publish_ad/publish_ad_bloc/publish_ad_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:assoshare/core/domain/entities/result.dart' as _i6;
import 'package:assoshare/domain/entities/ad/ad_entity.dart' as _i9;
import 'package:assoshare/domain/entities/ad/post_ad_entity.dart' as _i7;
import 'package:assoshare/domain/repositories/ad_repository.dart' as _i4;
import 'package:assoshare/domain/usecases/publish_ad/is_ad_description_valid_use_case.dart'
    as _i3;
import 'package:assoshare/domain/usecases/publish_ad/is_ad_title_valid_use_case.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IsAdTitleValidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsAdTitleValidUseCase extends _i1.Mock
    implements _i2.IsAdTitleValidUseCase {
  MockIsAdTitleValidUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool execute(String? title) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [title],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [IsAdDescriptionValidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsAdDescriptionValidUseCase extends _i1.Mock
    implements _i3.IsAdDescriptionValidUseCase {
  MockIsAdDescriptionValidUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool execute(String? description) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [description],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [AdRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdRepository extends _i1.Mock implements _i4.AdRepository {
  MockAdRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i6.Result<void>> postAd(_i7.PostAdEntity? ad) =>
      (super.noSuchMethod(
        Invocation.method(
          #postAd,
          [ad],
        ),
        returnValue:
            _i5.Future<_i6.Result<void>>.value(_i8.dummyValue<_i6.Result<void>>(
          this,
          Invocation.method(
            #postAd,
            [ad],
          ),
        )),
      ) as _i5.Future<_i6.Result<void>>);

  @override
  _i5.Future<_i6.Result<List<_i9.AdEntity>>> fetchAdsByUserId(String? uid) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAdsByUserId,
          [uid],
        ),
        returnValue: _i5.Future<_i6.Result<List<_i9.AdEntity>>>.value(
            _i8.dummyValue<_i6.Result<List<_i9.AdEntity>>>(
          this,
          Invocation.method(
            #fetchAdsByUserId,
            [uid],
          ),
        )),
      ) as _i5.Future<_i6.Result<List<_i9.AdEntity>>>);

  @override
  _i5.Future<_i6.Result<void>> deleteAd(String? adId) => (super.noSuchMethod(
        Invocation.method(
          #deleteAd,
          [adId],
        ),
        returnValue:
            _i5.Future<_i6.Result<void>>.value(_i8.dummyValue<_i6.Result<void>>(
          this,
          Invocation.method(
            #deleteAd,
            [adId],
          ),
        )),
      ) as _i5.Future<_i6.Result<void>>);
}
